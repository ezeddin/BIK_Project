function net = res_cifar_init(inputSizes,nResUnits)

net.meta.inputSize = inputSizes;
channels = 3;
kernels = 16;
net.layers = {} ;

net.layers{end+1} = struct(...
  'name', 'Start', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,channels,kernels)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

for i = 1:nResUnits
    resLayers = resUnit.new(i);
    resBegin = resLayers{1};    
    resEnd = resLayers{2};
    %TODO: Check how to propperly initialize bn layer
    net.layers{end + 1} = resBegin;
    net.layers{end + 1} = struct(...
        'name', sprintf('bn %d 1',i'),...
        'type', 'bnorm');
    net.layers{end}.weights = {single(ones(kernels,1)),single(zeros(kernels,1))};
    
    net.layers{end + 1} = struct(...
        'name', sprintf('relu %d 1',i),...
        'type', 'relu');
    
    %TODO: Check parameters for conv
    net.layers{end + 1} = struct(...
      'name', sprintf('conv %d 1',i), ...
      'type', 'conv', ...
      'weights', {xavier(3,3,kernels,kernels)}, ...
      'pad', 1, ...
      'stride', 1, ...
      'learningRate', [1 1], ...
      'weightDecay', [1 0]);

  
    net.layers{end + 1} = struct(...
        'name', sprintf('bn %d 2',i'),...
        'type', 'bnorm');
    net.layers{end}.weights = {single(ones(kernels,1)),single(zeros(kernels,1))};
    
    net.layers{end + 1} = struct(...
        'name', sprintf('relu %d 2',i),...
        'type', 'relu');
    
    %TODO: Check parameters for conv
    net.layers{end + 1} = struct(...
      'name', sprintf('conv %d 2',i), ...
      'type', 'conv', ...
      'weights', {xavier(3,3,kernels,kernels)}, ...
      'pad', 1, ...
      'stride', 1, ...
      'learningRate', [1 1], ...
      'weightDecay', [1 0]);
  
    net.layers{end + 1} = resEnd;
end

net.layers{end+1} = struct(...
  'name', 'Prev end', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,kernels,kernels)}, ...
  'size', [1,1,kernels,kernels],...
  'pad', [0,0,0,0], ...
  'stride', [16,16], ...
  'learningRate', [1 .001], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'End', ...
  'type', 'conv', ...
  'weights', {xavier(1,1,kernels,10)}, ...
  'size', [1,1,kernels,10],...
  'pad', [0,0,0,0], ...
  'stride', [4,4], ...
  'learningRate', [1 .001], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'prediction', ...
  'type', 'softmax', ...
  'precious', 0) ;

net = vl_simplenn_tidy(net) ;
end
