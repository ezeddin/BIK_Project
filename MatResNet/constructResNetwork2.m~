function net = constructResNetwork2(inputSizes,nResUnits)

net.meta.inputSize = inputSizes;
channels = 1;
kernels = 32;
net.layers = {} ;

net.layers{end+1} = struct(...
  'name', 'Start', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,channels,kernels)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

for i = 1:nResUnits
    resLayers = newResUnit(i);
    resBegin = resLayers{1};    
    resEnd = resLayers{2};
    %TODO: Check how to propperly initialize bn layer
    net.layers{end + 1} = resBegin;
    net.layers{end + 1} = struct(...
        'name', sprintf('bn %d 1',i'),...
        'type', 'bnorm');
    net.layers{end}.weights = {single(ones(channels,1)),single(ones(channels,1))};
    
    net.layers{end + 1} = struct(...
        'name', sprintf('relu %d 1',i),...
        'type', 'relu');
    
    %TODO: Check parameters for conv
    net.layers{end + 1} = struct(...
      'name', sprintf('conv %d 1',i), ...
      'type', 'conv', ...
      'weights', {xavier(3,3,kernels,kernels)}, ...
      'pad', 1, ...
      'stride', 1, ...
      'learningRate', [1 1], ...
      'weightDecay', [1 0]);

  
    net.layers{end + 1} = struct(...
        'name', sprintf('bn %d 2',i'),...
        'type', 'bnorm');
    net.layers{end}.weights = {single(ones(channels,1)),single(ones(channels,1))};
    
    net.layers{end + 1} = struct(...
        'name', sprintf('relu %d 2',i),...
        'type', 'relu');
    
    %TODO: Check parameters for conv
    net.layers{end + 1} = struct(...
      'name', sprintf('conv %d 2',i), ...
      'type', 'conv', ...
      'weights', {xavier(3,3,kernels,kernels)}, ...
      'pad', 1, ...
      'stride', 1, ...
      'learningRate', [1 1], ...
      'weightDecay', [1 0]);
  
    net.layers{end + 1} = resEnd;
end

net.layers{end+1} = struct(...
  'name', 'prediction', ...
  'type', 'conv', ...
  'weights', {xavier(3,3,kernels,1)}, ...
  'pad', 1, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

net = vl_simplenn_tidy(net) ;
end

function res_ = resBeginForward(layer,res,res_)
    res_.x = res.x;
    layer.resEnd.val.x = res.x;
end

function res = resBeginBackward(layer,res,res_)
    res.dzdx = res_.dzdx + layer.resEnd.val.dzdx;
end

function res_ = resEndForward(layer,res,res_)
    res_.x = res.x + layer.resBegin.val.x;
end

function res = resEndBackward(layer,res,res_)
    res.dzdx = res_.dzdx;
    layer.resBegin.val.dzdx = res_.dzdx;
end

function val = newResUnit(i)
    p = ptr();
    resBegin = struct(...
        'name', sprintf('resBegin %d',i),...
        'type', 'custom',...
        'forward',@resBeginForward,...
        'backward',@resBeginBackward,...
        'resEnd',p);
    resEnd = struct(...
        'name', sprintf('resEnd %d',i),...
        'type', 'custom',...
        'forward',@resEndForward,...
        'backward',@resEndBackward,...
        'resBegin',p);
    val = {resBegin, resEnd};
end